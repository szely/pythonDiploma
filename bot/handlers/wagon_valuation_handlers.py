from aiogram import Bot, types
from aiogram import Router, F
from aiogram.filters.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from bot.keyboards.user_keyboards import create_buttons, tools_buttoms, choose_send_buttoms, back_choose_send_find_buttoms, main_menu, back_menu
import logging


logger = logging.getLogger(__name__)


# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
class Form(StatesGroup):
    GET_NNS = State()
    GET_OSS = State()
    GET_SNAV = State()
    GET_SLV = State()
    GET_STOKP = State()
    GET_SONK = State()
    GET_SLKP = State()


router = Router()


# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–ª—è –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ –≤–∞–≥–æ–Ω–∞
nss = 0 # –ù–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã –≤–∞–≥–æ–Ω–∞ –≤ –≥–æ–¥–∞—Ö
oss = 0 # –û—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã –≤–∞–≥–æ–Ω–∞ –≤ –≥–æ–¥–∞—Ö
snav = 0 # –°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–æ–≥–∞ –æ—Ü–µ–Ω–∏–≤–∞–µ–º–æ–≥–æ –≤–∞–≥–æ–Ω–∞, —Ç—ã—Å. —Ä—É–±.
slv = 0 # –°—Ç–æ–∏–º–æ—Å—Ç—å –ª–æ–º–∞ –≤–∞–≥–æ–Ω–∞, —Ç—ã—Å. —Ä—É–±.
stokp = 0 # –°—Ä–µ–¥–Ω—è—è —Ç–µ–∫—É—â–∞—è —Ç–æ–ª—â–∏–Ω–∞ –æ–±–æ–¥–∞ –∫–æ–ª–µ—Å–Ω–æ–π –ø–∞—Ä—ã, –º–º
sonk = 0 # –°—Ç–æ–∏–º—Å–æ—Ç—å –Ω–æ–≤–æ–π –∫–æ–ª–µ—Å–Ω–æ–π –ø–∞—Ä—ã (—Å—Ç–∞—Ä–∞—è –æ—Å—å, –Ω–æ–≤–æ–µ –∫–æ–ª–µ—Å–æ - –°–û–ù–ö), —Ç—ã—Å. —Ä—É–±.
slkp = 0 # –°—Ç–æ–∏–º–æ—Å—Ç—å –ª–æ–º–∞ –∫–æ–ª–µ—Å–Ω–æ–π –ø–∞—Ä—ã, —Ç—ã—Å. —Ä—É–±.


# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ü–µ–Ω–∫–∏ –≤–∞–≥–æ–Ω–∞
@router.message(F.text == '–û—Ü–µ–Ω–∏—Ç—å –≤–∞–≥–æ–Ω ü™ô')
async def macro_info(message: types.Message,  state: FSMContext):
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s id %s –∑–∞—à–µ–ª –≤ —Ä–∞–∑–¥–µ–ª '–û—Ü–µ–Ω–∏—Ç—å –≤–∞–≥–æ–Ω'", message.from_user.first_name, message.from_user.id)
    await state.set_state(Form.GET_NNS)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã –≤–∞–≥–æ–Ω–∞, –ª–µ—Ç:', reply_markup=back_menu().as_markup(one_time_keyboard=True, resize_keyboard=True))


# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ —Å—Ä–æ–∫–∞ –≤–∞–≥–æ–Ω–∞
@router.message(Form.GET_NNS)
async def get_nss(message: types.Message, state: FSMContext):
    global nss
    await state.update_data(name=message.text)
    try:
        nss = float(message.text.replace(',', '.'))
        await state.set_state(Form.GET_OSS)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã, –ª–µ—Ç:',
                             reply_markup=back_menu().as_markup(one_time_keyboard=True, resize_keyboard=True))
    except Exception as e:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} id {message.from_user.id} –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!')
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã –≤–∞–≥–æ–Ω–∞, –ª–µ—Ç:',
                             reply_markup=back_menu().as_markup(one_time_keyboard=True, resize_keyboard=True))


# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ —Å—Ä–æ–∫–∞ –≤–∞–≥–æ–Ω–∞
@router.message(Form.GET_OSS)
async def get_oss(message: types.Message, state: FSMContext):
    global oss
    await state.update_data(name=message.text)
    try:
        oss = float(message.text.replace(',', '.'))
        await state.set_state(Form.GET_SNAV)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–æ–≥–∞ –≤–∞–≥–æ–Ω–∞, —Ç—ã—Å. —Ä—É–±.:',
                             reply_markup=back_menu().as_markup(one_time_keyboard=True, resize_keyboard=True))
    except Exception as e:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} id {message.from_user.id} –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!')
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã, –ª–µ—Ç:',
                             reply_markup=back_menu().as_markup(one_time_keyboard=True, resize_keyboard=True))


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–æ–≥–∞ –æ—Ü–µ–Ω–∏–≤–∞–µ–º–æ–≥–æ –≤–∞–≥–æ–Ω–∞
@router.message(Form.GET_SNAV)
async def get_snav(message: types.Message, state: FSMContext):
    global snav
    await state.update_data(name=message.text)
    try:
        snav = float(message.text.replace(',', '.'))
        await state.set_state(Form.GET_SLV)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ª–æ–º–∞ –≤–∞–≥–æ–Ω–∞, —Ç—ã—Å. —Ä—É–±.:', reply_markup=back_menu().as_markup(one_time_keyboard=True, resize_keyboard=True))
    except Exception as e:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} id {message.from_user.id} –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!')
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–æ–≥–∞ –≤–∞–≥–æ–Ω–∞, —Ç—ã—Å. —Ä—É–±.:',
                             reply_markup=back_menu().as_markup(one_time_keyboard=True, resize_keyboard=True))


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ª–æ–º–∞ –≤–∞–≥–æ–Ω–∞
@router.message(Form.GET_SLV)
async def get_slv(message: types.Message, state: FSMContext):
    global slv
    await state.update_data(name=message.text)
    try:
        slv = float(message.text.replace(',', '.'))
        await state.set_state(Form.GET_STOKP)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥–Ω—é—é —Ç–æ–ª—à–∏–Ω—É –æ–±–æ–¥–∞ –ö–ü (–º–∏–Ω.: 25 –º–º, –º–∞–∫—Å.: 76 –º–º), –º–º:', reply_markup=back_menu().as_markup(one_time_keyboard=True, resize_keyboard=True))
    except Exception as e:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} id {message.from_user.id} –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!')
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ª–æ–º–∞ –≤–∞–≥–æ–Ω–∞, —Ç—ã—Å. —Ä—É–±.:', reply_markup=back_menu().as_markup(one_time_keyboard=True, resize_keyboard=True))


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π —Ç–æ–ª—â–∏–Ω—ã –æ–±–æ–¥–∞ –∫–æ–ª–µ—Å–∞ –≤–∞–≥–æ–Ω–∞
@router.message(Form.GET_STOKP)
async def get_stokp(message: types.Message, state: FSMContext):
    global stokp
    await state.update_data(name=message.text)
    try:
        stokp = float(message.text.replace(',', '.'))
        await state.set_state(Form.GET_SONK)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –°–û–ù–ö, —Ç—ã—Å. —Ä—É–±.:', reply_markup=back_menu().as_markup(one_time_keyboard=True, resize_keyboard=True))
    except Exception as e:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} id {message.from_user.id} –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!')
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥–Ω—é—é —Ç–æ–ª—à–∏–Ω—É –æ–±–æ–¥–∞ –ö–ü (–º–∏–Ω.: 25 –º–º, –º–∞–∫—Å.: 76 –º–º), –º–º:', reply_markup=back_menu().as_markup(one_time_keyboard=True, resize_keyboard=True))


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –°–û–ù–ö
@router.message(Form.GET_SONK)
async def get_sonk(message: types.Message, state: FSMContext):
    global sonk
    await state.update_data(name=message.text)
    try:
        sonk = float(message.text.replace(',', '.'))
        await state.set_state(Form.GET_SLKP)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ª–æ–º–∞ –ö–ü, —Ç—ã—Å. —Ä—É–±.:', reply_markup=back_menu().as_markup(one_time_keyboard=True, resize_keyboard=True))
    except Exception as e:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} id {message.from_user.id} –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!')
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –°–û–ù–ö, —Ç—ã—Å. —Ä—É–±.:', reply_markup=back_menu().as_markup(one_time_keyboard=True, resize_keyboard=True))


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ª–æ–º–∞ –∫–æ–ª–µ—Å–Ω–æ–π –ø–∞—Ä—ã –∏ –≤—ã–≤–æ–¥ —Å—Ç–æ–∏–º–æ—Å—Ç–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –≤–∞–≥–æ–Ω–∞
@router.message(Form.GET_SLKP)
async def get_slkp(message: types.Message, state: FSMContext):
    global nss
    global oss
    global snav
    global slv
    global stokp
    global sonk
    global slkp
    await state.update_data(name=message.text)
    try:
        slkp = float(message.text.replace(',', '.'))
        try:
            sv = round((snav - slv - sonk * 4) / nss * oss + slv + ((sonk - slkp) / 52 * (stokp - 24) + slkp) * 4, 3)
            await message.answer(f'–°—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞–≥–æ–Ω–∞ –ø–æ –æ—Ü–µ–Ω–∫–µ –∑–∞—Ç—Ä–∞—Ç–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º: {sv} —Ç—ã—Å. —Ä—É–±.')
            await state.clear()
            await message.answer("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é:", reply_markup=back_menu().as_markup(one_time_keyboard=True, resize_keyboard=True))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞! {e}")
            await message.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!')
            await message.answer("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é:", reply_markup=back_menu().as_markup(one_time_keyboard=True, resize_keyboard=True))
    except Exception as e:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} id {message.from_user.id} –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!')
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ª–æ–º–∞ –ö–ü, —Ç—ã—Å. —Ä—É–±.:', reply_markup=back_menu().as_markup(one_time_keyboard=True, resize_keyboard=True))



