from aiogram import Router, F
from bot.keyboards.user_keyboards import back_menu, currency_cnverter, currency
from bot.other_methods.get_currency import get_currency_rate
from bot.other_methods.other_methods import currency_map
import logging
from aiogram import types
from aiogram.filters.state import StatesGroup, State
from aiogram.fsm.context import FSMContext


logger = logging.getLogger(__name__)

router = Router()

class Form(StatesGroup):
    FIRST_CUR = State()
    SECOND_CUR = State()
    SUM_CUR = State()
    FIND_NUM = State()


first_cur = ''
second_cur = ''
sum_cur = 0


# –î–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤ —Ä–æ—É—Ç–µ—Ä '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞–≥–æ–Ω–µ'
@router.message(F.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞–≥–æ–Ω–µ ‚ÑπÔ∏è')
async def back(message: types.Message, state: FSMContext):
    await state.clear()
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s id %s –∑–∞—à–µ–ª –≤ —Ä–∞–∑–¥–µ–ª '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞–≥–æ–Ω–µ'", message.from_user.first_name, message.from_user.id)
    await state.set_state(Form.FIND_NUM)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é:", reply_markup=back_menu().as_markup(one_time_keyboard=True, resize_keyboard=True))


# –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –∫—É—Ä—Å–µ –≤–∞–ª—é—Ç.
@router.message(F.text == '–ú–∞–∫—Ä–æ–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è üåé')
async def macro_info(message: types.Message):
    try:
        usd_rub = get_currency_rate(['USD', 'RUB'])
        eur_rub = get_currency_rate(['EUR', 'RUB'])
        kzt_rub = get_currency_rate(['KZT', 'RUB'])
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s id %s –∑–∞—à–µ–ª –≤ —Ä–∞–∑–¥–µ–ª '–ú–∞–∫—Ä–æ–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'", message.from_user.first_name, message.from_user.id)
        await message.answer(f'–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –¶–ë –†–§:\nUSD/RUB = {usd_rub} —Ä—É–±.\nEUR/RUB = {eur_rub} —Ä—É–±.\nKZT/RUB = {kzt_rub} —Ä—É–±.')
        await message.answer("–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–æ–º –≤–∞–ª—é—Ç:", reply_markup=currency_cnverter().as_markup(one_time_keyboard=True, resize_keyboard=True))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞! {e}")
        await message.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!')
        await message.answer("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é:",
                             reply_markup=back_menu().as_markup(one_time_keyboard=True, resize_keyboard=True))


# –ó–∞–ø—É—Å–∫ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ –≤–∞–ª—é—Ç
@router.message(F.text == '–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç üí±')
async def currency_cinverter(message: types.Message, state: FSMContext):
    await state.set_state(Form.FIRST_CUR)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∏–∑ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å: ', reply_markup=currency().as_markup(one_time_keyboard=True, resize_keyboard=True))


# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
@router.message(Form.FIRST_CUR)
async def first_cur(message: types.Message, state: FSMContext):
    global first_cur
    first_cur = currency_map(message.text)
    if first_cur != False:
        await state.set_state(Form.SECOND_CUR)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å: ', reply_markup=currency().as_markup(one_time_keyboard=True, resize_keyboard=True))
    else:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} id {message.from_user.id} –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—É—é –≤–∞–ª—é—Ç—É {message.text}")
        await message.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞!')
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∏–∑ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å: ', reply_markup=currency().as_markup(one_time_keyboard=True, resize_keyboard=True))


# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã –≤ –∫–æ—Ç–æ—Ä—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
@router.message(Form.SECOND_CUR)
async def second_cur(message: types.Message, state: FSMContext):
    global second_cur
    await state.update_data(name=message.text)
    second_cur = currency_map(message.text)
    if second_cur != False:
        await state.set_state(Form.SUM_CUR)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å: ')
    else:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} id {message.from_user.id} –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—É—é –≤–∞–ª—é—Ç—É {message.text}")
        await message.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞!')
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å: ', reply_markup=currency().as_markup(one_time_keyboard=True, resize_keyboard=True))


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º—ã, –∫–æ—Ç–æ—Ä—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
@router.message(Form.SUM_CUR)
async def sum_cur(message: types.Message, state: FSMContext):
    global first_cur
    global second_cur
    global sum_cur
    await state.update_data(name=message.text)
    try:
        if first_cur == 'RUB' and second_cur == 'RUB':
            sum_cur = float(message.text)
            result = sum_cur
            await message.answer(f'{sum_cur} {first_cur} = {result} {second_cur}\n –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –∏–ª–∏ —Å–Ω–æ–≤–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–æ–º –≤–∞–ª—é—Ç: ', reply_markup=currency_cnverter().as_markup(one_time_keyboard=True, resize_keyboard=True))
            await state.clear()
        else:
            sum_cur = float(message.text)
            result = round(get_currency_rate([first_cur, second_cur]) * sum_cur, 4)
            await message.answer('–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 4-—Ö –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π):')
            await message.answer(f'{sum_cur} {first_cur} = {result} {second_cur}')
            await message.answer('–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –∏–ª–∏ —Å–Ω–æ–≤–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–æ–º –≤–∞–ª—é—Ç: ',reply_markup=currency_cnverter().as_markup(one_time_keyboard=True, resize_keyboard=True))
            await state.clear()
    except Exception as e:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} id {message.from_user.id} –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!')
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å: ', reply_markup=back_menu().as_markup(one_time_keyboard=True, resize_keyboard=True))





