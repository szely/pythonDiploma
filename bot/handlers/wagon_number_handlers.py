from aiogram import Bot, types
from aiogram import Router, F
from aiogram.filters.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from bot.keyboards.user_keyboards import back_menu, back_menu_wagon_number
import logging
from bot.db.db import find_wagon
from bot.other_methods.wagon_rec import get_wagon_number
from bot.other_methods.check_wagon_number import check_wagon_number, get_wagon_type
import os


logger = logging.getLogger(__name__)


# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
class Form(StatesGroup):
    REC_NUM = State()

router = Router()


# –ó–∞–ø—Ä–æ—Å —Ñ–æ—Ç–æ —Å –Ω–æ–º–µ—Ä–æ–º –≤–∞–≥–æ–Ω–∞
@router.message(F.text == '–°–∫–∞–Ω–µ—Ä –Ω–æ–º–µ—Ä–∞ –≤–∞–≥–æ–Ω–∞ üì∑')
async def get_wagon_photo(message: types.Message, state: FSMContext):
	logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s id %s –∑–∞—à–µ–ª –≤ —Ä–∞–∑–¥–µ–ª '–°–∫–∞–Ω–µ—Ä –Ω–æ–º–µ—Ä–∞ –≤–∞–≥–æ–Ω–∞'", message.from_user.first_name, message.from_user.id)
	await state.set_state(Form.REC_NUM)
	await message.answer(f'–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –Ω–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞ –Ω–∞ –∫—É–∑–æ–≤–µ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é:', reply_markup=back_menu().as_markup(one_time_keyboard=True, resize_keyboard=True))


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ —Å –Ω–æ–º–µ—Ä–æ–º –≤–∞–≥–æ–Ω–∞ –∏ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞
@router.message(F.photo, Form.REC_NUM)
async def wagon_number(message: types.Message, state: FSMContext):
	await state.update_data(name=message.text)
	file = message.photo[-1].file_id
	file_name = f'{file}.png'
	await message.bot.download(file=file, destination=file_name)
	number = get_wagon_number(file_name)
	os.remove(file_name)
	try:
		number != None
		if len(number) == 8:
			try:
				int(number)
				if check_wagon_number(number):
					res = find_wagon(number)
					if res != 0:
						await message.answer(f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≤–∞–≥–æ–Ω—É {number}:')
						info_str = ''
						for key, value in res.items():
							info_str += f'{key}: {value}\n'
						await message.answer(info_str)
						await message.answer("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫–∞–Ω–µ—Ä –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é:", reply_markup=back_menu_wagon_number().as_markup(one_time_keyboard=True, resize_keyboard=True))
						await state.clear()
					else:
						wagon_type = get_wagon_type(number)
						await message.answer(f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≤–∞–≥–æ–Ω—É {number} –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –≠—Ç–æ—Ç –≤–∞–≥–æ–Ω –æ—Ç–Ω–æ—Å—Ç–∏—Ç—Å—è –∫ —Ç–∏–ø—É {wagon_type}.')
						await message.answer("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫–∞–Ω–µ—Ä –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é:", reply_markup=back_menu_wagon_number().as_markup(one_time_keyboard=True, resize_keyboard=True))
						await state.clear()
				else:
					await message.reply('–≠—Ç–æ –Ω–µ –Ω–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞!')
					await message.answer("–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é:", reply_markup=back_menu().as_markup(one_time_keyboard=True, resize_keyboard=True))
					if message.text == '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é ‚Ü©Ô∏è':
						await state.clear()
			except Exception as e:
				logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} id {message.from_user.id} –ø—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ç–æ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –Ω–æ–º–µ—Ä–æ–º –≤–∞–≥–æ–Ω–∞, –∏–ª–∏ –Ω–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {e}")
				await message.reply("–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —á–∏—Å–ª–æ–≤–æ–º –≤–æ—Ä–º–∞—Ç–µ! –î–ª–∏–Ω–∞ –Ω–æ–º–µ—Ä–∞ –≤–∞–≥–æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–≤–Ω–∞ 8!")
				await message.answer("–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é:", reply_markup=back_menu().as_markup(one_time_keyboard=True, resize_keyboard=True))
				if message.text == '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é ‚Ü©Ô∏è':
					await state.clear()
		else:
			await message.reply("–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —á–∏—Å–ª–æ–≤–æ–º –≤–æ—Ä–º–∞—Ç–µ! –î–ª–∏–Ω–∞ –Ω–æ–º–µ—Ä–∞ –≤–∞–≥–æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–≤–Ω–∞ 8!")
			await message.answer("–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é:",  reply_markup=back_menu().as_markup(one_time_keyboard=True, resize_keyboard=True))
			if message.text == '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é ‚Ü©Ô∏è':
				await state.clear()
	except Exception as e:
		logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} id {message.from_user.id} –ø—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ç–æ –Ω–æ–º–µ—Ä–∞ –≤–∞–≥–æ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å: {e}")
		await message.answer(" –ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫–∞–Ω–µ—Ä –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é:", reply_markup=back_menu_wagon_number().as_markup(one_time_keyboard=True, resize_keyboard=True))
		if message.text == '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é ‚Ü©Ô∏è':
			await state.clear()
